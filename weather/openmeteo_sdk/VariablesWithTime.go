// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package openmeteo_sdk

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariablesWithTime struct {
	_tab flatbuffers.Table
}

func GetRootAsVariablesWithTime(buf []byte, offset flatbuffers.UOffsetT) *VariablesWithTime {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VariablesWithTime{}
	x.Init(buf, n+offset)
	return x
}

func FinishVariablesWithTimeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVariablesWithTime(buf []byte, offset flatbuffers.UOffsetT) *VariablesWithTime {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VariablesWithTime{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVariablesWithTimeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VariablesWithTime) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VariablesWithTime) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VariablesWithTime) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VariablesWithTime) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *VariablesWithTime) TimeEnd() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VariablesWithTime) MutateTimeEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *VariablesWithTime) Interval() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *VariablesWithTime) MutateInterval(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *VariablesWithTime) Variables(obj *VariableWithValues, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *VariablesWithTime) VariablesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func VariablesWithTimeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func VariablesWithTimeAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func VariablesWithTimeAddTimeEnd(builder *flatbuffers.Builder, timeEnd int64) {
	builder.PrependInt64Slot(1, timeEnd, 0)
}
func VariablesWithTimeAddInterval(builder *flatbuffers.Builder, interval int32) {
	builder.PrependInt32Slot(2, interval, 0)
}
func VariablesWithTimeAddVariables(builder *flatbuffers.Builder, variables flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(variables), 0)
}
func VariablesWithTimeStartVariablesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func VariablesWithTimeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
