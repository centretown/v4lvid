// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package openmeteo_sdk

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WeatherApiResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsWeatherApiResponse(buf []byte, offset flatbuffers.UOffsetT) *WeatherApiResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WeatherApiResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishWeatherApiResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWeatherApiResponse(buf []byte, offset flatbuffers.UOffsetT) *WeatherApiResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WeatherApiResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWeatherApiResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WeatherApiResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WeatherApiResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WeatherApiResponse) Latitude() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *WeatherApiResponse) MutateLatitude(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *WeatherApiResponse) Longitude() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *WeatherApiResponse) MutateLongitude(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *WeatherApiResponse) Elevation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *WeatherApiResponse) MutateElevation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *WeatherApiResponse) GenerationTimeMilliseconds() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *WeatherApiResponse) MutateGenerationTimeMilliseconds(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *WeatherApiResponse) LocationId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeatherApiResponse) MutateLocationId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *WeatherApiResponse) Model() Model {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return Model(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WeatherApiResponse) MutateModel(n Model) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func (rcv *WeatherApiResponse) UtcOffsetSeconds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WeatherApiResponse) MutateUtcOffsetSeconds(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *WeatherApiResponse) Timezone() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WeatherApiResponse) TimezoneAbbreviation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WeatherApiResponse) Current(obj *VariablesWithTime) *VariablesWithTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariablesWithTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WeatherApiResponse) Daily(obj *VariablesWithTime) *VariablesWithTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariablesWithTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WeatherApiResponse) Hourly(obj *VariablesWithTime) *VariablesWithTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariablesWithTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WeatherApiResponse) Minutely15(obj *VariablesWithTime) *VariablesWithTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariablesWithTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WeatherApiResponse) SixHourly(obj *VariablesWithTime) *VariablesWithTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariablesWithTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func WeatherApiResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func WeatherApiResponseAddLatitude(builder *flatbuffers.Builder, latitude float32) {
	builder.PrependFloat32Slot(0, latitude, 0.0)
}
func WeatherApiResponseAddLongitude(builder *flatbuffers.Builder, longitude float32) {
	builder.PrependFloat32Slot(1, longitude, 0.0)
}
func WeatherApiResponseAddElevation(builder *flatbuffers.Builder, elevation float32) {
	builder.PrependFloat32Slot(2, elevation, 0.0)
}
func WeatherApiResponseAddGenerationTimeMilliseconds(builder *flatbuffers.Builder, generationTimeMilliseconds float32) {
	builder.PrependFloat32Slot(3, generationTimeMilliseconds, 0.0)
}
func WeatherApiResponseAddLocationId(builder *flatbuffers.Builder, locationId int64) {
	builder.PrependInt64Slot(4, locationId, 0)
}
func WeatherApiResponseAddModel(builder *flatbuffers.Builder, model Model) {
	builder.PrependByteSlot(5, byte(model), 0)
}
func WeatherApiResponseAddUtcOffsetSeconds(builder *flatbuffers.Builder, utcOffsetSeconds int32) {
	builder.PrependInt32Slot(6, utcOffsetSeconds, 0)
}
func WeatherApiResponseAddTimezone(builder *flatbuffers.Builder, timezone flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(timezone), 0)
}
func WeatherApiResponseAddTimezoneAbbreviation(builder *flatbuffers.Builder, timezoneAbbreviation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(timezoneAbbreviation), 0)
}
func WeatherApiResponseAddCurrent(builder *flatbuffers.Builder, current flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(current), 0)
}
func WeatherApiResponseAddDaily(builder *flatbuffers.Builder, daily flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(daily), 0)
}
func WeatherApiResponseAddHourly(builder *flatbuffers.Builder, hourly flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(hourly), 0)
}
func WeatherApiResponseAddMinutely15(builder *flatbuffers.Builder, minutely15 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(minutely15), 0)
}
func WeatherApiResponseAddSixHourly(builder *flatbuffers.Builder, sixHourly flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(sixHourly), 0)
}
func WeatherApiResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
